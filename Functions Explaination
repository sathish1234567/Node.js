Promise function()
-- promise function call back functions --> 2 params (resolve, reject)
-- how to define promise function in Node
syntax for define():
let <PromiseFn> = new Promise(function(resolve, reject){..........});
Where
resolve --> Promise is fullfilled
reject  --> Promise is not fullfilled

Syntax for calling promise function()
<PromiseFn>.then(callback fn(){...}).catch(function(fromRject){.....})

Here
callback fn(){...} --> related to resolve
catch(function(fromRject){.....})/callback fn() --> related to reject

Ex:
ler promiseToCleanTheRoom = new Promise(function(resolve,reject){
  let isClean = true;
  if(isClean){
    resolve('Clean');
  }else{
    reject('Not Clean');
  }
});


promiseToCleanTheRoom.then(function(fromResolve){
consloe.log('Room is' + fromResolve);
}).catch(function(fromReject){
consloe.log('Room is' + fromReject);
});

output:
______
if it is resolved:Room is clean.
else: Room is not clean


Promise for multiple function()
_______________________________

let cleanRoom = function(){
  return new Promise(function(resolve, reject){
    resolve('Cleanedt he room');
  });
};

let removeGarbage = function(message){
  return new Promise(function(resolve, reject){
    resolve(mesasge + 'remove garbage');
  });
};

let winIceCream = function(message){
  return new Promise(function(resolve, reject){
    resolve(message + 'won Ice cream');
  });
};

calling:

cleanRoom().then(function(result){
  return removeGarbage(result);
}).then(function(result){
  return winIceCream(result)
}).then(function(result){
  console.log('finished' + result);
})

or

Promise.all()
_____________
syntax
Promise.all([promisefn1(), promisefn2(), promisefn3()....]).then(callback fn(){.....});

Promise.all([cleanRoom(),removeGarbage(result),winIceCream(result)].then(function(){console.log('all finished')});


output:
finished cleaned the room remove garbage won incecream
or all finsihed


Promise.race()
______________
Promise.race([cleanRoom(),removeGarbage(),winIceCream()]).then(function(){console.log('One of them is finished')};

output:
One of them is finished.







function().then(results=>{....}).catch(err=>{ return err })
___________________________________________________________







Async and wait:
---------------

-- async functions built on promises
-- it is non blocking code
-- sync functions blocking the code
-- use async code above 7.6 version
-- to check the version in cmd visual studio code : node -v <-| 8.1
-- await is only valid in async functions only

promises:
________
f1.txt
  |_content: f1 text
  

f2.txt
  |_content: f2 text  

index.js file
function doA(){
  return new Promise(function(resolve, reject){
    fs.readFile('f1.txt', function(err,data){
      if(!err){
      resolve(data.toString());
      }
    }
  }
}

function doB(){
  return new Promise(function(resolve, reject){
    fs.readFile('f2.txt', function(err,data){
      if(!err){
      resolve(data.toString());
      }
    }
  }
}
aysnc function main(){
  myObj['data1'] = await doA();
  myObj['data2'] = await doB();
  console.log(myObj);
}
main();

node index.js
output:

{data1:'f1 text', data2:'f2 text'}


