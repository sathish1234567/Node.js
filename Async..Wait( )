https://www.geeksforgeeks.org/async-await-function-in-javascript/ -ref
Using Async Await in Node.js
____________________________
Before Node version 7.6, the callbacks were the only official way provided by Node to run one function after another. As Node architecture is single-threaded and asynchronous, the community devised the callback functions, which would fire (or run) after the first function (to which the callbacks were assigned) run is completed.

Example of a Callback:

app.get('/', function(){
 function1(arg1, function(){
   ...
})
});
The problem with this kind of code is that this kind of situations can cause a lot of trouble and the code can get messy when there are several functions. This situation is called what is commonly known as a callback hell.
So, to find a way out, the idea of Promises and function chaining was introduced.

Example: Before async/await

function fun1(req, res){
  return request.get('http://localhost:3000')
   .catch((err) =>{
     console.log('found error');
}).then((res) =>{
   console.log('get request returned.');
});
Explanation:
The above code demos a function implemented with function chaining instead of callbacks. It can be observed that the code is now more easy to understand and readable. The code basically says that GET localhost:3000, catch the error if there is any; if there is no error then implement the following statement:
console.log(‘get request returned.’);

With Node v8, the async/await feature was officially rolled out by the Node to deal with Promises and function chaining. The functions need not to be chained one after another, simply await the function that returns the Promise. But the function async needs to be declared before awaiting a function returning a Promise. The code now looks like below.

Example: After async/await

async function fun1(req, res){
  let response = await request.get('http://localhost:3000');
    if (response.err) { console.log('error');}
    else { console.log('fetched response');
}
Explanation:
The code above basically asks the javascript engine running the code to wait for the request.get() function to complete before moving on to the next line to execute it. The request.get() function returns a Promise for which user will await . Before async/await, if it needs to be made sure that the functions are running in the desired sequence, that is one after the another, chain them one after the another or register callbacks.
Code writing and understanding becomes easy with async/await as can be observed from both the examples.


Async/Await Function in JavaScript
___________________________________
We all know that Javascript is a Synchronous which means that it has an event loop that allows you to queue up an action that won’t take place until the loop is available sometime after the code that queued the action has finished executing. But there’s a lot of functionalities in our program which makes our code Asynchronous. One of them is the Async/Await functionality.

Async/Await is the extension of promises which we get as a support in the language. You can refer Promises in Javascript to know more about it.

Async:
_______
It simply allows us to write promises based code as if it was synchronous and it checks that we are not breaking the execution thread. It operates asynchronously via the event-loop. Async functions will always return a value. It makes sure that a promise is returned and if it is not returned then javascript automatically wraps it in a promise which is resolved with its value.

Examples:

filter_none
brightness_4
const getData = async() => { 
    var data = "Hello World"; 
    return data; 
} 
  
getData().then(data => console.log(data)); 
Output:

Hello World


Await:
_____
Await function is used to wait for the promise. It could be used within the async block only. It makes the code wait until the promise returns a result. It only makes the async block wait.

filter_none
brightness_4
const getData = async() => { 
    var y = await "Hello World"; 
    console.log(y); 
} 
  
console.log(1); 
getData(); 
console.log(2); 
Output:

1
2
Hello World
Notice that the console prints 2 before the “Hello World”. This is due to the usage of the await keyword.

Supported Browsers: The browsers supported by Async/Await Function are listed below:

Google Chrome
Firefox
Apple Safari
Opera
