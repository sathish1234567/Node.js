Java script Arrays:
arrays always support umbered index.

1. defining the Array:
used to store multiple values in single varaible:

Ex:.  var cars= ["s", "a", "t"];

2. blank array decelrations:

var a=[];

3. assinging values to blank array
a[0] = "S";
a[1] = "A";
a[3} = "T";

4. access the element of an array:
a[0],  display as 'S'.

5 . Arrays type is object.

typeOf(a); --> object

4. you can store in array as <-- functions objects, Arrays

5. Array properties and methods

length:
a.length = 3 contains 3 elements
a.sort() --> sorting ascending order by default asc

to get the last element of an array --> a[a.length - 1] == 'T' means a[3-1] = a[2]

looping arrays:
var b =[];
for(i=0; i<a.length - 1; i++)
{
b[i] = a[i];
}

push() and pop()

--> push()
adding elements to an array
it is appending to an array

Ex: a[1, 2, 3];
a.push(4);  or a.push(a.length) = 4;

output: a[1,2,3,4]

--->isArray()
Array.isArray(a) --> return bollean value true or false
output: true bcz 'a' --> is an array

--->toString()
means: convert array to string
var x = a.toString()
x=s,a,t

----> join(<<elt seperator>>)
join is also work as toString(), but additionally added the seperator
a.join(" , ");
output:
s*a*t

----> pop()
delete the element from an array
delete work as LIFO(last in first out)/recently added elt deleted.../ removes last elet

Ex:a.pop()
"t" -->removed

---> shift() 
removes the first element (FIFO)
a.shift() 

output:
removes 'S' from an array "a"

----> unshift()
add the elements at the beginning
a.unshift("B") --> it is adding to first place

a = ['B','S','A','T']

---->changing the elts in ana array based on index only possible
a[0] = 'Boll'

output:
a = ['BOll','S','A','T']

---> deleting the elets based on index
delete a[0] 

delete the 0 index. --> Boll

output:
a = ['S','A','T']

----> splice()
to add new/ delete the elts to an array
splice method returns the an array with removed elts

Adding:
syntax:
a.splice(1,0,"1","2");  --> means 1 --> where to start the add elt in an array here from index 1
                                  0 --> how many elts delete from an index --> no delete the elts means --> 0
                                  "1", "2" elets inserted from an index 1
                                  
Ouput:
a = ['s','1','2','A','T"]

Ex:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
a = fruits.splice(2, 1, "Lemon", "Kiwi");

Ouput:
Banana,Orange,Lemon,Kiwi,Mango
a = ["Applie"] --> delted items

Deleting():
var fruits = ["Banana", "Orange", "Apple", "Mango"];
a=fruits.splice(0, 1);        // Removes the first element of fruits

output:
fruits = ["Orange", "Apple", "Mango"];
a=["Banana"]

----> concat() --> merging of two arrays
It always returns a new array.

var myGirls = ["Cecilie", "Lone"];
var myBoys = ["Emil", "Tobias", "Linus"];
var myChildren = myGirls.concat(myBoys);   // Concatenates (joins) myGirls and myBoys

output:
Cecilie,Lone,Emil,Tobias,Linus

var arr1 = ["Cecilie", "Lone"];
var arr2 = ["Emil", "Tobias", "Linus"];
var arr3 = ["Robin", "Morgan"];
var myChildren = arr1.concat(arr2, arr3);   // Concatenates arr1 with arr2 and arr3

output:
Cecilie,Lone,Emil,Tobias,Linus,Robin,Morgan


merging array with values:
var arr1 = ["Cecilie", "Lone"];
var myChildren = arr1.concat(["Emil", "Tobias", "Linus"]);

output:
Cecilie,Lone,Emil,Tobias,Linus

-----> slice(start index)
The slice() method slices out a piece of an array into a new array.
The slice() method creates a new array. It does not remove any elements from the source array.

var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1); ---> it returns an array from index 1
var citrus1 = fruits.slice(4); ---> it returns an array from index 1
output:
citrus=["Orange", "Lemon", "Apple", "Mango"]
citrus1=["Mango"]

slice( startindex, needed elts(endindex-1))

Ex:
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
var citrus = fruits.slice(1, 3);

output:
citrus = ["Orange", "Lemon"]



------> Sort()

for strings

ASC:
----
Ex:

var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();        // Sorts the elements of fruits

fruits=[Apple,Banana,Mango,Orange]

----> reverse()
 for Descending
 
 var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();        // First sort the elements of fruits 
fruits.reverse();     // Then reverse the order of the elements

output
fruits=[Apple,Banana,Mango,Orange]  -> sort()
fruits=[Orange,Mango,Banana,Apple]





for numbers

Ascending:
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a - b});

points=[1,5,10,25,40,100]

Descending
var points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b - a});

points=[100,40,25,10,5,1]



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.
Iteration Methods


1. forEach()
2. .map()
3. .filter()
4. .reduce()
5. .reduceRight()
6. .every()
7. .some()
8. .indexOf()
9. .lastIndexOf()
10. .find()
11. .findIndex()

 forEach():
 
 Array.protoType.forEach(callback,[context])
 -- invokes the call back for each value
 -- always returns undefined.
 -- you can not the break out of the loop unless you throw an exception
 -- call back arguements(value(v), index(i), array)
 -- nothing is return.
 
 array a[4]
 0    1   2   3         index
 1    2   3   4         content/value
 
 const a = [1,2,3,4];
 
 
const ret = a.forEach(v=>{
 throw new Error('Error manully teminated');
 console.log(v)
 });
 
 console.log(ret);      --> undefined
 
 output:
 1
 2
 3
 4
 
 undefined   --> no return from foreach()
 
 here:
 call back function has defined as above code
 
 v=>{
 throw new Error('Error manully teminated');
 console.log(v)
 }
 
 
 
 
 filter():
 _________
 -- Array.prototype.filter(callback,[context]);
 -- returns a new array of elts that pass filter
 -- will not modify the existing array
 -- callback takes(elt, index, originalarray)
 -- returns the values based on true.
 
Ex: 
 const a=[1,2,10,11]; num = 1,2,10,11 passed to one by one
 filtered = a.filter(num => num > 5 );
 console.log(filtered);
 
 output:
 filtered:
 10, 11
 
 Ex: 
 const a=[1,2,10,11]; num = 1,2,10,11 passed to one by one
                      i -- index of an each elt of an array
 filtered = a.filter((num,i) => i % 2 == 0 );
 console.log(filtered);
 
 output:
 1,2,10
 
 
  
 
 
 
 
 
 
 
 
 
 




























